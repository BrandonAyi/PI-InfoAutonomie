package model;

import com.avaje.ebean.Page;
import com.fasterxml.jackson.annotation.JsonIgnore;
import play.db.ebean.Model;

import javax.persistence.*;
import java.util.List;

/**
 * Bean to store generic data generated by a sensor.
 * Created by Mathieu on 23/01/2015.
 */
@Entity
public class Data extends Model{

    @EmbeddedId @JsonIgnore
    public PrimKey primKey;

    /**
     * A numeric representation of the collected data.
     */
    public double value;

    @Embeddable
    public class PrimKey {
        public long timestamp;
        public String mote;
        public String label;

        public PrimKey() {
        }

        public PrimKey(long timestamp, String mote, String label) {
            this.timestamp = timestamp;
            this.mote = mote;
            this.label = label;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof PrimKey)) return false;

            PrimKey primKey = (PrimKey) o;

            if (timestamp != primKey.timestamp) return false;
            if (label != null ? !label.equals(primKey.label) : primKey.label != null) return false;
            if (mote != null ? !mote.equals(primKey.mote) : primKey.mote != null) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = (int) (timestamp ^ (timestamp >>> 32));
            result = 31 * result + mote.hashCode();
            result = 31 * result + label.hashCode();
            return result;
        }

        @Override
        public String toString() {
            return "PrimKey{" +
                    "timestamp=" + timestamp +
                    ", mote='" + mote + '\'' +
                    ", label='" + label + '\'' +
                    '}';
        }
    }

    public Data() {
    }

    public Data(long timestamp, double value, String label, String mote) {
        this.value = value;
        this.primKey = new PrimKey(timestamp, mote, label);
    }

    public static Model.Finder<PrimKey,Data> find = new Model.Finder<>(PrimKey.class, Data.class);

    public static List<Data> all() {
        return find.all();
    }

    public static Data create(Data data) {
        data.save();
        return data;
    }

    public static Page<Data> page(int page, int pageSize, String sortBy, String order, String filter) {
        return
                find.where()
                        .ilike("mote", "%" + filter + "%")
                        .orderBy(sortBy+ " " + order)
                        .findPagingList(pageSize)
                        .setFetchAhead(false)
                        .getPage(page);
    }

    public static Page<Data> pageTime(int page, int pageSize, String sortBy, String order, String filter, long beginTmp, long endTmp) {
        return
                find.where()
                        .between("timestamp", beginTmp, endTmp)
                        .ilike("mote", "%" + filter + "%")
                        .orderBy(sortBy+ " " + order)
                        .findPagingList(pageSize)
                        .setFetchAhead(false)
                        .getPage(page);
    }

    /**
     * Returns the timestamp of the measure.
     * @return measure's timestamp.
     */
    public long getTimestamp() {
        return primKey.timestamp;
    }

    /**
     * Changes measure's timestamp.
     * @param timestamp the new timestamp.
     */
    public void setTimestamp(long timestamp) {
        primKey.timestamp = timestamp;
    }

    /**
     * Returns the measure's associated label.
     * @return the associated label.
     */
    public String getLabel() {
        return primKey.label;
    }

    /**
     * Changes the measure's associated label.
     * @param label the new label.
     */
    public void setLabel(String label) {
        primKey.label = label;
    }

    /**
     * Returns the measure's numerical value.
     * @return the numerical value.
     */
    public double getValue() {
        return value;
    }

    /**
     * Changes the measure's numerical value.
     * @param value the new value.
     */
    public void setValue(double value) {
        this.value = value;
    }

    /**
     * Returns the string identifying the mote which has taken the measure.
     * @return the string identifying the mote.
     */
    public String getMote() {
        return primKey.mote;
    }

    /**
     * Changes the string identifying the mote which has taken the measure.
     * @param mote the new string.
     */
    public void setMote(String mote) {
        primKey.mote = mote;
    }

    public PrimKey getPrimKey() {
        return primKey;
    }

    public void setPrimKey(PrimKey primKey) {
        this.primKey = primKey;
    }

    @Override
    public String toString() {
        return "Data{" +
                "primKey=" + getPrimKey() +
                ", value=" + getValue() +
                '}';
    }
}
